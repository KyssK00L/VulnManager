<?xml version="1.0" encoding="UTF-8"?>
<vulnerabilities>
  <vulnerability>
    <Name>Injection SQL</Name>
    <Level>Critical</Level>
    <Scope>Application web - Module d'authentification</Scope>
    <Protocol-Interface>HTTPS/443</Protocol-Interface>
    <CVSS3.1_Score>9.8</CVSS3.1_Score>
    <CVSS3.1_VectorString>CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H</CVSS3.1_VectorString>
    <Description>Une vulnérabilité d'injection SQL a été identifiée au niveau du module d'authentification. Les paramètres d'entrée utilisateur ne sont pas correctement validés, permettant à un attaquant d'injecter du code SQL arbitraire dans les requêtes de base de données.</Description>
    <Risk>Un attaquant peut exploiter cette vulnérabilité pour :
- Contourner l'authentification
- Exfiltrer des données sensibles de la base de données
- Modifier ou supprimer des données
- Potentiellement obtenir un accès complet au système</Risk>
    <Recommendation>1. Implémenter des requêtes préparées (prepared statements) pour toutes les interactions avec la base de données
2. Valider et assainir toutes les entrées utilisateur
3. Appliquer le principe du moindre privilège pour les comptes de base de données
4. Mettre en place un WAF (Web Application Firewall)
5. Effectuer des revues de code et tests de sécurité réguliers</Recommendation>
    <Type>Web Application</Type>
  </vulnerability>

  <vulnerability>
    <Name>Cross-Site Scripting (XSS) réfléchi</Name>
    <Level>High</Level>
    <Scope>Application web - Formulaire de recherche</Scope>
    <Protocol-Interface>HTTPS/443</Protocol-Interface>
    <CVSS3.1_Score>7.1</CVSS3.1_Score>
    <CVSS3.1_VectorString>CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:L</CVSS3.1_VectorString>
    <Description>Le formulaire de recherche ne sanitize pas correctement les entrées utilisateur avant de les afficher dans les résultats. Cela permet l'injection de code JavaScript malveillant qui sera exécuté dans le navigateur de la victime.</Description>
    <Risk>Un attaquant peut créer un lien malveillant qui, lorsqu'il est cliqué par un utilisateur authentifié, permet de :
- Voler les cookies de session
- Détourner la session utilisateur
- Rediriger vers des sites malveillants
- Modifier le contenu de la page
- Exécuter des actions au nom de l'utilisateur</Risk>
    <Recommendation>1. Encoder toutes les sorties HTML (HTML entity encoding)
2. Implémenter une Content Security Policy (CSP) stricte
3. Utiliser des frameworks modernes avec protection XSS intégrée
4. Valider et filtrer les entrées côté serveur
5. Utiliser HTTPOnly et Secure flags pour les cookies de session</Recommendation>
    <Type>Web Application</Type>
  </vulnerability>

  <vulnerability>
    <Name>Absence de politique de mots de passe robuste</Name>
    <Level>Medium</Level>
    <Scope>Système d'authentification - Ensemble de l'organisation</Scope>
    <Protocol-Interface>N/A</Protocol-Interface>
    <CVSS3.1_Score>5.3</CVSS3.1_Score>
    <CVSS3.1_VectorString>CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N</CVSS3.1_VectorString>
    <Description>L'organisation ne dispose pas d'une politique de mots de passe robuste. Les utilisateurs peuvent définir des mots de passe faibles (moins de 8 caractères, sans complexité) et aucune rotation n'est imposée.</Description>
    <Risk>Les mots de passe faibles peuvent être facilement compromis par :
- Attaques par force brute
- Attaques par dictionnaire
- Rainbow tables
- Social engineering
Cela peut conduire à des accès non autorisés et des compromissions de comptes.</Risk>
    <Recommendation>1. Mettre en place une politique de mots de passe avec :
   - Longueur minimale de 12 caractères
   - Complexité (majuscules, minuscules, chiffres, caractères spéciaux)
   - Vérification contre les mots de passe communément utilisés
2. Implémenter l'authentification multi-facteurs (MFA)
3. Définir une durée de validité maximale (ex: 90 jours)
4. Bloquer les comptes après 5 tentatives échouées
5. Former les utilisateurs aux bonnes pratiques de sécurité</Recommendation>
    <Type>Authentication</Type>
  </vulnerability>

  <vulnerability>
    <Name>Exposition de données sensibles via logs</Name>
    <Level>Medium</Level>
    <Scope>Infrastructure - Serveurs applicatifs</Scope>
    <Protocol-Interface>SSH/22</Protocol-Interface>
    <CVSS3.1_Score>6.5</CVSS3.1_Score>
    <CVSS3.1_VectorString>CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N</CVSS3.1_VectorString>
    <Description>Les fichiers de logs de l'application contiennent des données sensibles en clair, notamment :
- Mots de passe
- Tokens d'authentification
- Informations personnelles (emails, numéros de téléphone)
- Données de cartes bancaires
Ces logs sont stockés sans chiffrement et sont accessibles à plusieurs administrateurs.</Description>
    <Risk>En cas de compromission d'un compte administrateur ou d'accès non autorisé aux serveurs :
- Exposition de données sensibles d'utilisateurs
- Vol d'identifiants permettant des accès non autorisés
- Non-conformité RGPD et autres réglementations
- Atteinte à la réputation de l'organisation</Risk>
    <Recommendation>1. Ne jamais logger de données sensibles (mots de passe, tokens, PII)
2. Implémenter du masking pour les données critiques (ex: **** pour les cartes)
3. Chiffrer les fichiers de logs au repos
4. Mettre en place une rotation et archivage sécurisé des logs
5. Restreindre l'accès aux logs (principe du moindre privilège)
6. Auditer régulièrement le contenu des logs
7. Utiliser un SIEM pour centraliser et sécuriser les logs</Recommendation>
    <Type>Linux</Type>
  </vulnerability>

  <vulnerability>
    <Name>Accès physique non restreint à la salle serveur</Name>
    <Level>High</Level>
    <Scope>Infrastructure physique - Salle serveur du bâtiment A</Scope>
    <Protocol-Interface>N/A</Protocol-Interface>
    <CVSS3.1_Score>7.8</CVSS3.1_Score>
    <CVSS3.1_VectorString>CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H</CVSS3.1_VectorString>
    <Description>La salle serveur est protégée uniquement par une porte standard avec serrure mécanique. Aucun contrôle d'accès électronique n'est en place, et la clé est accessible à de nombreux employés. Il n'y a pas de journal d'accès ni de surveillance vidéo.</Description>
    <Risk>L'accès physique non contrôlé aux serveurs permet :
- Vol ou destruction de matériel
- Installation de dispositifs malveillants (keyloggers, sniffers)
- Accès direct aux données via console
- Modification de la configuration hardware
- Interruption des services (débranchement, sabotage)
- Exfiltration de données via USB</Risk>
    <Recommendation>1. Installer un système de contrôle d'accès par badge électronique
2. Mettre en place une surveillance vidéo 24/7 avec enregistrement
3. Limiter l'accès aux seules personnes autorisées (liste blanche)
4. Maintenir un journal d'accès horodaté
5. Installer des détecteurs d'intrusion et d'ouverture de porte
6. Mettre en place une procédure d'accompagnement pour les visiteurs
7. Sécuriser physiquement les serveurs (racks verrouillés)
8. Désactiver les ports USB sur les serveurs critiques</Recommendation>
    <Type>Physical Security</Type>
  </vulnerability>

  <vulnerability>
    <Name>Certificats SSL auto-signés en production</Name>
    <Level>Low</Level>
    <Scope>Infrastructure - Serveurs web de production</Scope>
    <Protocol-Interface>HTTPS/443</Protocol-Interface>
    <CVSS3.1_Score>3.7</CVSS3.1_Score>
    <CVSS3.1_VectorString>CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N</CVSS3.1_VectorString>
    <Description>Les serveurs web de production utilisent des certificats SSL auto-signés au lieu de certificats émis par une autorité de certification reconnue. Les utilisateurs reçoivent des avertissements de sécurité dans leurs navigateurs.</Description>
    <Risk>L'utilisation de certificats auto-signés :
- Entraîne une méfiance des utilisateurs
- Facilite les attaques de type Man-in-the-Middle (MITM)
- Habitue les utilisateurs à ignorer les avertissements de sécurité
- Ne garantit pas l'identité du serveur
- Peut impacter négativement le SEO</Risk>
    <Recommendation>1. Obtenir des certificats SSL/TLS auprès d'une CA reconnue (Let's Encrypt gratuit)
2. Mettre en place un processus de renouvellement automatique
3. Configurer HSTS (HTTP Strict Transport Security)
4. Utiliser des certificats avec une longueur de clé appropriée (minimum 2048 bits RSA)
5. Tester la configuration SSL avec SSL Labs
6. Implémenter Certificate Transparency monitoring</Recommendation>
    <Type>Cryptography</Type>
  </vulnerability>
</vulnerabilities>
