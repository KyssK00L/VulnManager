import { useQuery } from '@tanstack/react-query'
import { X, XCircle, Search } from 'lucide-react'
import { useEffect, useMemo, useRef, useState } from 'react'

const SEVERITY_CONFIG = {
  Critical: { color: 'bg-red-100 text-red-800 border-red-300 dark:bg-red-900/30 dark:text-red-300 dark:border-red-700', activeColor: 'bg-red-600 text-white border-red-600 dark:bg-red-600' },
  High: { color: 'bg-orange-100 text-orange-800 border-orange-300 dark:bg-orange-900/30 dark:text-orange-300 dark:border-orange-700', activeColor: 'bg-orange-600 text-white border-orange-600 dark:bg-orange-600' },
  Medium: { color: 'bg-yellow-100 text-yellow-800 border-yellow-300 dark:bg-yellow-900/30 dark:text-yellow-300 dark:border-yellow-700', activeColor: 'bg-yellow-600 text-white border-yellow-600 dark:bg-yellow-600' },
  Low: { color: 'bg-blue-100 text-blue-800 border-blue-300 dark:bg-blue-900/30 dark:text-blue-300 dark:border-blue-700', activeColor: 'bg-blue-600 text-white border-blue-600 dark:bg-blue-600' },
  Informational: { color: 'bg-gray-100 text-gray-800 border-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600', activeColor: 'bg-gray-600 text-white border-gray-600 dark:bg-gray-600' },
}

export default function VulnerabilityFilters({ filters, onChange, totalResults }) {
  const [selectedTypes, setSelectedTypes] = useState(filters.types || [])

  // Fetch vulnerability types from API
  const { data: typesData } = useQuery({
    queryKey: ['vulnerabilityTypes'],
    queryFn: () => fetch('/api/types').then((res) => res.json()),
    staleTime: 1000 * 60 * 5, // 5 minutes
  })

  // API returns { types, by_category }
  const allTypes = typesData?.types || []
  const typesByCategory = typesData?.by_category || {}

  // Type search UI state
  const [typeQuery, setTypeQuery] = useState('')
  const [showTypeDropdown, setShowTypeDropdown] = useState(false)
  const typeInputRef = useRef(null)
  useEffect(() => {
    const handler = (e) => {
      if (!typeInputRef.current) return
      if (!typeInputRef.current.parentElement?.contains(e.target)) {
        setShowTypeDropdown(false)
      }
    }
    document.addEventListener('click', handler)
    return () => document.removeEventListener('click', handler)
  }, [])

  const filteredTypeOptions = useMemo(() => {
    const q = typeQuery.trim().toLowerCase()
    if (!q) return allTypes.filter((t) => !selectedTypes.includes(t.name))
    return allTypes.filter(
      (t) => !selectedTypes.includes(t.name) && (t.name.toLowerCase().includes(q) || t.category.toLowerCase().includes(q)),
    )
  }, [typeQuery, allTypes, selectedTypes])

  const updateFilter = (key, value) => {
    onChange({ ...filters, [key]: value || undefined })
  }

  const toggleLevel = (level) => {
    if (filters.level === level) {
      updateFilter('level', '')
    } else {
      updateFilter('level', level)
    }
  }

  const toggleType = (type) => {
    const newTypes = selectedTypes.includes(type)
      ? selectedTypes.filter(t => t !== type)
      : [...selectedTypes, type]

    setSelectedTypes(newTypes)
    updateFilter('types', newTypes.length > 0 ? newTypes : undefined)
  }

  const removeType = (type) => {
    const newTypes = selectedTypes.filter(t => t !== type)
    setSelectedTypes(newTypes)
    updateFilter('types', newTypes.length > 0 ? newTypes : undefined)
  }

  const clearAllFilters = () => {
    setSelectedTypes([])
    onChange({})
  }

  const activeFiltersCount =
    (filters.level ? 1 : 0) +
    (selectedTypes.length > 0 ? 1 : 0) +
    (filters.min_score ? 1 : 0) +
    (filters.max_score ? 1 : 0) +
    (filters.scope ? 1 : 0) +
    (filters.protocol ? 1 : 0)

  return (
    <div className="mt-4 space-y-4">
      {/* Header with Clear All button */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <h3 className="text-sm font-semibold text-gray-700 dark:text-gray-300">Filters</h3>
          {activeFiltersCount > 0 && (
            <span className="rounded-full bg-primary-100 dark:bg-primary-900/30 px-2 py-0.5 text-xs font-semibold text-primary-700 dark:text-primary-400">
              {activeFiltersCount}
            </span>
          )}
        </div>
        {activeFiltersCount > 0 && (
          <button
            onClick={clearAllFilters}
            className="text-xs font-medium text-gray-600 dark:text-gray-400 hover:text-red-600 dark:hover:text-red-400 transition-colors flex items-center gap-1"
          >
            <XCircle className="h-3.5 w-3.5" />
            Clear all
          </button>
        )}
      </div>

      {/* Severity Level Badges */}
      <div>
        <label className="mb-2 block text-xs font-medium text-gray-600 dark:text-gray-400">Severity Level</label>
        <div className="flex flex-wrap gap-2">
          {Object.entries(SEVERITY_CONFIG).map(([level, config]) => {
            const isActive = filters.level === level
            return (
              <button
                key={level}
                onClick={() => toggleLevel(level)}
                className={`rounded-lg border-2 px-3 py-1.5 text-xs font-semibold transition-all ${
                  isActive ? config.activeColor : config.color
                }`}
              >
                {level}
              </button>
            )
          })}
        </div>
      </div>

      {/* Selected Types as Chips */}
      {selectedTypes.length > 0 && (
        <div>
          <label className="mb-2 block text-xs font-medium text-gray-600 dark:text-gray-400">
            Selected Types ({selectedTypes.length})
          </label>
          <div className="flex flex-wrap gap-2">
            {selectedTypes.map((type) => (
              <span
                key={type}
                className="inline-flex items-center gap-1.5 rounded-lg bg-primary-100 dark:bg-primary-900/30 px-3 py-1.5 text-xs font-semibold text-primary-700 dark:text-primary-400"
              >
                {type}
                <button
                  onClick={() => removeType(type)}
                  className="hover:text-red-600 dark:hover:text-red-400 transition-colors"
                >
                  <X className="h-3.5 w-3.5" />
                </button>
              </span>
            ))}
          </div>
        </div>
      )}

      {/* Type Selection Combobox */}
      <div className="relative">
        <label className="mb-2 block text-xs font-medium text-gray-600 dark:text-gray-400">
          Vulnerability Types
        </label>
        <div className="relative">
          <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-400 dark:text-gray-500" />
          <input
            ref={typeInputRef}
            type="text"
            value={typeQuery}
            onFocus={() => setShowTypeDropdown(true)}
            onChange={(e) => {
              setTypeQuery(e.target.value)
              setShowTypeDropdown(true)
            }}
            className="input w-full pl-9"
            placeholder="Search and add types..."
          />
        </div>
        {showTypeDropdown && (
          <div className="absolute z-10 mt-1 max-h-64 w-full overflow-auto rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 shadow-lg">
            {filteredTypeOptions.length === 0 ? (
              <div className="p-3 text-sm text-gray-500 dark:text-gray-400">No matching types</div>
            ) : (
              <ul className="divide-y divide-gray-100 dark:divide-gray-700">
                {filteredTypeOptions.map((type) => (
                  <li
                    key={`${type.category}:${type.name}`}
                    className="cursor-pointer px-3 py-2 text-sm hover:bg-gray-50 dark:hover:bg-gray-700"
                    onClick={() => {
                      toggleType(type.name)
                      setTypeQuery('')
                      setShowTypeDropdown(false)
                    }}
                  >
                    <div className="flex items-center justify-between">
                      <span className="text-gray-900 dark:text-gray-100">{type.name}</span>
                      <span className="text-xs text-gray-500 dark:text-gray-400">{type.category}</span>
                    </div>
                  </li>
                ))}
              </ul>
            )}
          </div>
        )}
      </div>

      {/* CVSS Score Range */}
      <div className="grid grid-cols-2 gap-3">
        <div>
          <label className="mb-2 block text-xs font-medium text-gray-600 dark:text-gray-400">
            Min CVSS Score
          </label>
          <input
            type="number"
            min="0"
            max="10"
            step="0.1"
            value={filters.min_score || ''}
            onChange={(e) => updateFilter('min_score', e.target.value)}
            className="input w-full"
            placeholder="0.0"
          />
        </div>
        <div>
          <label className="mb-2 block text-xs font-medium text-gray-600 dark:text-gray-400">
            Max CVSS Score
          </label>
          <input
            type="number"
            min="0"
            max="10"
            step="0.1"
            value={filters.max_score || ''}
            onChange={(e) => updateFilter('max_score', e.target.value)}
            className="input w-full"
            placeholder="10.0"
          />
        </div>
      </div>

      {/* Additional filters: scope and protocol */}
      <div className="grid grid-cols-2 gap-3">
        <div>
          <label className="mb-2 block text-xs font-medium text-gray-600 dark:text-gray-400">
            Scope contains
          </label>
          <input
            type="text"
            value={filters.scope || ''}
            onChange={(e) => updateFilter('scope', e.target.value)}
            className="input w-full"
            placeholder="e.g., Web Application"
          />
        </div>
        <div>
          <label className="mb-2 block text-xs font-medium text-gray-600 dark:text-gray-400">
            Protocol/Interface contains
          </label>
          <input
            type="text"
            value={filters.protocol || ''}
            onChange={(e) => updateFilter('protocol', e.target.value)}
            className="input w-full"
            placeholder="e.g., HTTP"
          />
        </div>
      </div>

      {/* Results count */}
      {totalResults !== undefined && (
        <div className="pt-2 text-center">
          <p className="text-xs font-medium text-gray-600 dark:text-gray-400">
            {totalResults === 0 ? (
              <span className="text-red-600 dark:text-red-400">No vulnerabilities match your filters</span>
            ) : (
              <span className="text-primary-600 dark:text-primary-400">
                {totalResults.toLocaleString()} {totalResults === 1 ? 'vulnerability' : 'vulnerabilities'} found
              </span>
            )}
          </p>
        </div>
      )}
    </div>
  )
}
