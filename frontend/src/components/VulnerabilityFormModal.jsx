import { useState, useEffect } from 'react'
import { X, Calculator } from 'lucide-react'
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'
import { vulnsApi } from '../lib/api'
import { notify } from '../lib/notifications'
import CVSSCalculatorPanel from './CVSSCalculatorPanel'
import * as LucideIcons from 'lucide-react'

const LEVELS = ['Critical', 'High', 'Medium', 'Low', 'Informational']

// Vulnerability types organized by category for pentest
const TYPES = [
  { category: 'Infrastructure & Network', items: [
    'Network',
    'Active Directory',
    'LDAP',
    'DNS',
    'Mail Server',
    'VPN',
    'Firewall',
  ]},
  { category: 'Systems', items: [
    'Windows',
    'Linux',
    'Unix',
    'macOS',
  ]},
  { category: 'Web & Applications', items: [
    'Web Application',
    'API',
    'Android',
    'iOS',
    'Thick Client',
  ]},
  { category: 'Databases', items: [
    'Database',
    'MS SQL Server',
    'MySQL/MariaDB',
    'PostgreSQL',
    'MongoDB',
    'Oracle',
  ]},
  { category: 'Cloud', items: [
    'AWS',
    'Azure',
    'GCP',
    'Cloud',
  ]},
  { category: 'Security Services', items: [
    'Authentication',
    'Authorization',
    'Cryptography',
  ]},
  { category: 'Others', items: [
    'IoT',
    'SCADA/ICS',
    'Physical Security',
    'Social Engineering',
    'Wireless',
    'VoIP',
    'Container/Docker',
    'Kubernetes',
    'CI/CD',
    'Configuration',
    'Other',
  ]},
]

// Convert CVSS score to severity level
const getSeverityFromScore = (score) => {
  const numScore = parseFloat(score)
  if (isNaN(numScore)) return 'Medium'
  if (numScore === 0.0) return 'Informational'
  if (numScore >= 9.0) return 'Critical'
  if (numScore >= 7.0) return 'High'
  if (numScore >= 4.0) return 'Medium'
  return 'Low'
}

export default function VulnerabilityFormModal({ isOpen, onClose, vulnerability = null }) {
  const queryClient = useQueryClient()
  const isEdit = !!vulnerability
  const [showCVSSCalculator, setShowCVSSCalculator] = useState(false)

  // Fetch vulnerability types with metadata
  const { data: typesData } = useQuery({
    queryKey: ['vulnerabilityTypes'],
    queryFn: () => fetch('/api/types').then((res) => res.json()),
    staleTime: 1000 * 60 * 5, // 5 minutes
  })

  const typesByCategory = typesData?.by_category || TYPES.reduce((acc, group) => {
    acc[group.category] = group.items.map(name => ({ name, icon: 'Circle', color: 'text-gray-600' }))
    return acc
  }, {})

  const [formData, setFormData] = useState({
    name: '',
    level: 'Medium',
    scope: '',
    protocol_interface: '',
    cvss_score: '',
    cvss_vector: '',
    description: '',
    risk: '',
    recommendation: '',
    type: 'Web Application',
  })

  useEffect(() => {
    if (vulnerability) {
      setFormData({
        name: vulnerability.name || '',
        level: vulnerability.level || 'Medium',
        scope: vulnerability.scope || '',
        protocol_interface: vulnerability.protocol_interface || '',
        cvss_score: vulnerability.cvss_score?.toString() || '',
        cvss_vector: vulnerability.cvss_vector || '',
        description: vulnerability.description || '',
        risk: vulnerability.risk || '',
        recommendation: vulnerability.recommendation || '',
        type: vulnerability.type || 'Technical',
      })
    } else {
      setFormData({
        name: '',
        level: 'Medium',
        scope: '',
        protocol_interface: '',
        cvss_score: '',
        cvss_vector: '',
        description: '',
        risk: '',
        recommendation: '',
        type: 'Web Application',
      })
    }
  }, [vulnerability])

  const mutation = useMutation({
    mutationFn: async (data) => {
      const payload = {
        ...data,
        cvss_score: data.cvss_score ? parseFloat(data.cvss_score) : null,
        cvss_vector: data.cvss_vector || null,
      }

      if (isEdit) {
        return vulnsApi.update(vulnerability.id, payload)
      } else {
        return vulnsApi.create(payload)
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['vulnerabilities'] })
      notify(
        `Vulnerability ${isEdit ? 'updated' : 'created'} successfully`,
        'success',
      )
      onClose()
    },
    onError: (error) => {
      const message = error.response?.data?.detail || error.message
      notify(`Failed to ${isEdit ? 'update' : 'create'} vulnerability: ${message}`, 'error')
    },
  })

  const handleSubmit = (e) => {
    e.preventDefault()
    mutation.mutate(formData)
  }

  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData((prev) => ({ ...prev, [name]: value }))
  }

  const handleCVSSApply = ({ score, vector }) => {
    const severityLevel = getSeverityFromScore(score)
    setFormData((prev) => ({
      ...prev,
      cvss_score: score.toString(),
      cvss_vector: vector,
      level: severityLevel, // Auto-adjust severity level
    }))
    notify(`CVSS score applied: ${score.toFixed(1)} (${severityLevel})`, 'success')
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 p-4">
      <div className="w-full max-w-3xl max-h-[90vh] overflow-y-auto rounded-lg bg-white dark:bg-gray-800 shadow-xl">
        {/* Header */}
        <div className="sticky top-0 z-10 flex items-center justify-between border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 px-6 py-4">
          <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100">
            {isEdit ? 'Edit Vulnerability' : 'Create Vulnerability'}
          </h2>
          <button
            onClick={onClose}
            className="rounded-lg p-2 text-gray-400 dark:text-gray-500 transition-colors hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-gray-600 dark:hover:text-gray-300"
          >
            <X className="h-5 w-5" />
          </button>
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit} className="p-6">
          <div className="space-y-6">
            {/* Name */}
            <div>
              <label htmlFor="name" className="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300">
                Name <span className="text-red-500 dark:text-red-400">*</span>
              </label>
              <input
                type="text"
                id="name"
                name="name"
                value={formData.name}
                onChange={handleChange}
                required
                className="input w-full"
                placeholder="e.g., SQL Injection in Login Form"
              />
            </div>

            {/* Level and Type */}
            <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
              <div>
                <label htmlFor="level" className="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Severity Level <span className="text-red-500 dark:text-red-400">*</span>
                </label>
                <select
                  id="level"
                  name="level"
                  value={formData.level}
                  onChange={handleChange}
                  required
                  className="input w-full"
                >
                  {LEVELS.map((level) => (
                    <option key={level} value={level}>
                      {level}
                    </option>
                  ))}
                </select>
                {formData.cvss_score && (
                  <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
                    ðŸ’¡ Auto-adjusted from CVSS score: {parseFloat(formData.cvss_score).toFixed(1)}
                  </p>
                )}
              </div>

              <div>
                <label htmlFor="type" className="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Category <span className="text-red-500 dark:text-red-400">*</span>
                </label>
                <div className="relative">
                  <select
                    id="type"
                    name="type"
                    value={formData.type}
                    onChange={handleChange}
                    required
                    className="input w-full pl-10"
                  >
                    {Object.entries(typesByCategory).map(([category, types]) => (
                      <optgroup key={category} label={category}>
                        {types.map((type) => (
                          <option key={type.name} value={type.name}>
                            {type.name}
                          </option>
                        ))}
                      </optgroup>
                    ))}
                  </select>
                  {/* Icon display */}
                  {formData.type && (() => {
                    const allTypes = Object.values(typesByCategory).flat()
                    const typeMetadata = allTypes.find(t => t.name === formData.type)
                    if (typeMetadata && typeMetadata.icon) {
                      const IconComponent = LucideIcons[typeMetadata.icon]
                      return IconComponent ? (
                        <div className="absolute left-3 top-1/2 -translate-y-1/2 pointer-events-none">
                          <IconComponent className={`h-5 w-5 ${typeMetadata.color || 'text-gray-400'}`} />
                        </div>
                      ) : null
                    }
                    return null
                  })()}
                </div>
              </div>
            </div>

            {/* Scope and Protocol */}
            <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
              <div>
                <label htmlFor="scope" className="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Scope <span className="text-red-500 dark:text-red-400">*</span>
                </label>
                <input
                  type="text"
                  id="scope"
                  name="scope"
                  value={formData.scope}
                  onChange={handleChange}
                  required
                  className="input w-full"
                  placeholder="e.g., Web Application"
                />
              </div>

              <div>
                <label
                  htmlFor="protocol_interface"
                  className="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300"
                >
                  Protocol/Interface <span className="text-red-500 dark:text-red-400">*</span>
                </label>
                <input
                  type="text"
                  id="protocol_interface"
                  name="protocol_interface"
                  value={formData.protocol_interface}
                  onChange={handleChange}
                  required
                  className="input w-full"
                  placeholder="e.g., HTTP/HTTPS"
                />
              </div>
            </div>

            {/* CVSS Score and Vector with Calculator */}
            <div className="rounded-lg border-2 border-primary-200 dark:border-primary-800 bg-primary-50/30 dark:bg-primary-900/20 p-4">
              <div className="mb-3 flex items-center justify-between">
                <label className="text-sm font-medium text-gray-900 dark:text-gray-100">
                  CVSS 3.1 Score & Vector
                </label>
                <button
                  type="button"
                  onClick={() => setShowCVSSCalculator(true)}
                  className="btn btn-primary flex items-center gap-2"
                >
                  <Calculator className="h-4 w-4" />
                  <span>Calculate CVSS</span>
                </button>
              </div>

              <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                <div>
                  <label
                    htmlFor="cvss_score"
                    className="mb-2 block text-xs font-medium text-gray-600 dark:text-gray-400"
                  >
                    Score (0.0 - 10.0)
                  </label>
                  <input
                    type="number"
                    id="cvss_score"
                    name="cvss_score"
                    value={formData.cvss_score}
                    onChange={handleChange}
                    step="0.1"
                    min="0"
                    max="10"
                    className="input w-full"
                    placeholder="e.g., 7.5"
                  />
                </div>

                <div>
                  <label
                    htmlFor="cvss_vector"
                    className="mb-2 block text-xs font-medium text-gray-600 dark:text-gray-400"
                  >
                    Vector String
                  </label>
                  <input
                    type="text"
                    id="cvss_vector"
                    name="cvss_vector"
                    value={formData.cvss_vector}
                    onChange={handleChange}
                    className="input w-full font-mono text-sm"
                    placeholder="CVSS:3.1/AV:N/AC:L/..."
                  />
                </div>
              </div>

              {formData.cvss_score && (
                <div className="mt-3 rounded bg-white dark:bg-gray-700 px-3 py-2 text-sm">
                  <span className="font-medium text-gray-700 dark:text-gray-300">Current Score: </span>
                  <span className="font-bold text-primary-600 dark:text-primary-400">
                    {parseFloat(formData.cvss_score).toFixed(1)}
                  </span>
                  {formData.cvss_vector && (
                    <span className="ml-2 text-xs text-gray-500 dark:text-gray-400">({formData.cvss_vector})</span>
                  )}
                </div>
              )}
            </div>

            {/* Description */}
            <div>
              <label
                htmlFor="description"
                className="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Description <span className="text-red-500 dark:text-red-400">*</span>
              </label>
              <textarea
                id="description"
                name="description"
                value={formData.description}
                onChange={handleChange}
                required
                rows={4}
                className="input w-full"
                placeholder="Detailed description of the vulnerability..."
              />
            </div>

            {/* Risk */}
            <div>
              <label htmlFor="risk" className="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300">
                Risk Analysis <span className="text-red-500 dark:text-red-400">*</span>
              </label>
              <textarea
                id="risk"
                name="risk"
                value={formData.risk}
                onChange={handleChange}
                required
                rows={4}
                className="input w-full"
                placeholder="Risk analysis and potential impact..."
              />
            </div>

            {/* Recommendation */}
            <div>
              <label
                htmlFor="recommendation"
                className="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Recommendation <span className="text-red-500 dark:text-red-400">*</span>
              </label>
              <textarea
                id="recommendation"
                name="recommendation"
                value={formData.recommendation}
                onChange={handleChange}
                required
                rows={4}
                className="input w-full"
                placeholder="Recommended remediation steps..."
              />
            </div>
          </div>

          {/* Footer */}
          <div className="mt-6 flex justify-end gap-3 border-t border-gray-200 dark:border-gray-700 pt-4">
            <button type="button" onClick={onClose} className="btn btn-secondary">
              Cancel
            </button>
            <button
              type="submit"
              disabled={mutation.isPending}
              className="btn btn-primary"
            >
              {mutation.isPending
                ? isEdit
                  ? 'Updating...'
                  : 'Creating...'
                : isEdit
                  ? 'Update'
                  : 'Create'}
            </button>
          </div>
        </form>
      </div>

      {/* CVSS Calculator Panel */}
      <CVSSCalculatorPanel
        isOpen={showCVSSCalculator}
        onClose={() => setShowCVSSCalculator(false)}
        onApply={handleCVSSApply}
        initialVector={formData.cvss_vector}
      />
    </div>
  )
}
