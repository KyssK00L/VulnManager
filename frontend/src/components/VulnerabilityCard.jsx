import { Shield, Edit, Trash2 } from 'lucide-react'
import { useAuth } from '../contexts/AuthContext'
import { useQuery } from '@tanstack/react-query'
import * as LucideIcons from 'lucide-react'

const levelColors = {
  Critical: 'badge-critical',
  High: 'badge-high',
  Medium: 'badge-medium',
  Low: 'badge-low',
  Informational: 'badge-info',
}

export default function VulnerabilityCard({ vulnerability, onEdit, onDelete }) {
  const { user } = useAuth()
  const canEdit = user?.role === 'editor' || user?.role === 'admin'

  // Fetch type metadata
  const { data: typesData } = useQuery({
    queryKey: ['vulnerabilityTypes'],
    queryFn: () => fetch('/api/types').then((res) => res.json()),
    staleTime: 1000 * 60 * 5,
  })

  const getTypeIcon = (typeName) => {
    if (!typesData) return null
    const allTypes = Object.values(typesData.by_category || {}).flat()
    const typeMetadata = allTypes.find(t => t.name === typeName)
    if (typeMetadata && typeMetadata.icon) {
      const IconComponent = LucideIcons[typeMetadata.icon]
      return IconComponent ? { Icon: IconComponent, color: typeMetadata.color } : null
    }
    return null
  }

  const typeIcon = getTypeIcon(vulnerability.type)

  return (
    <div className="card p-6 transition-shadow hover:shadow-md">
      <div className="mb-3 flex items-start justify-between gap-2">
        <h3 className="flex-1 text-lg font-semibold text-gray-900 dark:text-gray-100">
          {vulnerability.name}
        </h3>
        <span className={`badge ${levelColors[vulnerability.level]}`}>
          {vulnerability.level}
        </span>
      </div>

      <div className="mb-4 space-y-2 text-sm text-gray-600 dark:text-gray-400">
        {/* Type with icon */}
        {vulnerability.type && (
          <div className="flex items-center gap-2">
            {typeIcon ? (
              <typeIcon.Icon className={`h-4 w-4 flex-shrink-0 ${typeIcon.color}`} />
            ) : (
              <Shield className="h-4 w-4 flex-shrink-0 text-gray-400 dark:text-gray-500" />
            )}
            <span className="font-medium">{vulnerability.type}</span>
          </div>
        )}
        <div className="flex items-center gap-2">
          <Shield className="h-4 w-4 flex-shrink-0 text-gray-400 dark:text-gray-500" />
          <span>{vulnerability.protocol_interface}</span>
        </div>
        {vulnerability.cvss_score && (
          <div className="flex items-center gap-2">
            <span className="font-medium">CVSS:</span>
            <span className="rounded bg-gray-100 dark:bg-gray-700 px-2 py-0.5 font-mono text-xs text-gray-900 dark:text-gray-100">
              {vulnerability.cvss_score.toFixed(1)}
            </span>
          </div>
        )}
      </div>

      <p className="mb-4 line-clamp-3 text-sm text-gray-700 dark:text-gray-300">
        {vulnerability.description}
      </p>

      <div className="flex items-center justify-between border-t border-gray-100 dark:border-gray-700 pt-4">
        <span className="text-xs text-gray-500 dark:text-gray-400">
          Updated {new Date(vulnerability.updated_at).toLocaleDateString()}
        </span>
        {canEdit && (
          <div className="flex gap-1">
            <button
              onClick={() => onEdit(vulnerability)}
              className="btn-ghost p-2 text-sm text-blue-600 dark:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/30"
              title="Edit vulnerability"
            >
              <Edit className="h-4 w-4" />
            </button>
            <button
              onClick={() => onDelete(vulnerability)}
              className="btn-ghost p-2 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/30"
              title="Delete vulnerability"
            >
              <Trash2 className="h-4 w-4" />
            </button>
          </div>
        )}
      </div>
    </div>
  )
}
