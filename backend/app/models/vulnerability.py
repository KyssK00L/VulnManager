"""Vulnerability and VulnerabilityHistory models."""

import enum
import uuid
from datetime import datetime

from sqlalchemy import DateTime, Enum, Float, ForeignKey, JSON, String, Text, func
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy.orm import Mapped, mapped_column

from app.database import Base


class VulnerabilityLevel(str, enum.Enum):
    """Severity levels for vulnerabilities."""

    CRITICAL = "Critical"
    HIGH = "High"
    MEDIUM = "Medium"
    LOW = "Low"
    INFO = "Informational"


class VulnerabilityType(str, enum.Enum):
    """Types of vulnerabilities."""

    TECHNICAL = "Technical"
    ORGANIZATIONAL = "Organizational"
    PHYSICAL = "Physical"


class Vulnerability(Base):
    """Main vulnerability model."""

    __tablename__ = "vulnerabilities"

    id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)

    # Core fields (matching XML schema)
    name: Mapped[str] = mapped_column(String(255), nullable=False, index=True)
    level: Mapped[VulnerabilityLevel] = mapped_column(Enum(VulnerabilityLevel), nullable=False, index=True)
    scope: Mapped[str] = mapped_column(Text, nullable=False)
    protocol_interface: Mapped[str] = mapped_column(String(255), nullable=False, index=True)

    # CVSS
    cvss_score: Mapped[float | None] = mapped_column(Float, nullable=True, index=True)
    cvss_vector: Mapped[str | None] = mapped_column(String(255), nullable=True)

    # Details
    description: Mapped[str] = mapped_column(Text, nullable=False)
    risk: Mapped[str] = mapped_column(Text, nullable=False)
    recommendation: Mapped[str] = mapped_column(Text, nullable=False)

    # Type
    vuln_type: Mapped[VulnerabilityType] = mapped_column(
        "type", Enum(VulnerabilityType), nullable=False, index=True
    )

    # Tag order preservation (JSON array of field names)
    tag_order: Mapped[list[str] | None] = mapped_column(
        JSONB().with_variant(JSON(), "sqlite"), nullable=True
    )

    # Metadata
    created_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), server_default=func.now(), nullable=False)
    updated_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True), server_default=func.now(), onupdate=func.now(), nullable=False, index=True
    )
    created_by: Mapped[uuid.UUID | None] = mapped_column(UUID(as_uuid=True), ForeignKey("users.id"), nullable=True)
    updated_by: Mapped[uuid.UUID | None] = mapped_column(UUID(as_uuid=True), ForeignKey("users.id"), nullable=True)

    def __repr__(self) -> str:
        return f"<Vulnerability {self.name} ({self.level.value})>"


class VulnerabilityHistory(Base):
    """History table to track changes to vulnerabilities."""

    __tablename__ = "vulnerability_history"

    id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    vulnerability_id: Mapped[uuid.UUID] = mapped_column(
        UUID(as_uuid=True), ForeignKey("vulnerabilities.id", ondelete="CASCADE"), nullable=False, index=True
    )

    # Snapshot of the vulnerability at this point in time
    snapshot: Mapped[dict] = mapped_column(
        JSONB().with_variant(JSON(), "sqlite"), nullable=False
    )

    # Change metadata
    changed_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), server_default=func.now(), nullable=False)
    changed_by: Mapped[uuid.UUID | None] = mapped_column(UUID(as_uuid=True), ForeignKey("users.id"), nullable=True)
    change_type: Mapped[str] = mapped_column(String(50), nullable=False)  # created, updated, deleted

    def __repr__(self) -> str:
        return f"<VulnerabilityHistory {self.vulnerability_id} @ {self.changed_at}>"
