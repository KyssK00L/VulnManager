"""Vulnerability schemas."""

from datetime import datetime
from uuid import UUID

from pydantic import BaseModel, Field

from app.models.vulnerability import VulnerabilityLevel, VulnerabilityType


class VulnerabilityBase(BaseModel):
    """Base schema with common vulnerability fields."""

    name: str = Field(..., min_length=1, max_length=255)
    level: VulnerabilityLevel
    scope: str = Field(..., min_length=1)
    protocol_interface: str = Field(..., min_length=1, max_length=255)
    cvss_score: float | None = Field(None, ge=0.0, le=10.0)
    cvss_vector: str | None = Field(None, max_length=255)
    description: str = Field(..., min_length=1)
    risk: str = Field(..., min_length=1)
    recommendation: str = Field(..., min_length=1)
    vuln_type: VulnerabilityType = Field(..., alias="type")


class VulnerabilityCreate(VulnerabilityBase):
    """Schema for creating a new vulnerability."""

    tag_order: list[str] | None = None


class VulnerabilityUpdate(BaseModel):
    """Schema for updating a vulnerability (all fields optional)."""

    name: str | None = Field(None, min_length=1, max_length=255)
    level: VulnerabilityLevel | None = None
    scope: str | None = Field(None, min_length=1)
    protocol_interface: str | None = Field(None, min_length=1, max_length=255)
    cvss_score: float | None = Field(None, ge=0.0, le=10.0)
    cvss_vector: str | None = Field(None, max_length=255)
    description: str | None = Field(None, min_length=1)
    risk: str | None = Field(None, min_length=1)
    recommendation: str | None = Field(None, min_length=1)
    vuln_type: VulnerabilityType | None = Field(None, alias="type")
    tag_order: list[str] | None = None


class VulnerabilityInfo(VulnerabilityBase):
    """Schema for vulnerability information (response)."""

    id: UUID
    tag_order: list[str] | None
    created_at: datetime
    updated_at: datetime
    created_by: UUID | None
    updated_by: UUID | None

    class Config:
        from_attributes = True
        populate_by_name = True


class VulnerabilityExportDoc(BaseModel):
    """Schema for exporting vulnerability for Word document."""

    id: UUID
    name: str
    level: str
    scope: str
    protocol_interface: str
    cvss_score: float | None
    cvss_vector: str | None
    description: str
    risk: str
    recommendation: str
    type: str
    tag_order: list[str] | None


class VulnerabilitySearchResponse(BaseModel):
    """Paginated vulnerability search results."""

    items: list[VulnerabilityInfo]
    total: int
    page: int
    per_page: int
